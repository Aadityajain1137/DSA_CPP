class Solution {
public:
    int snakesAndLadders(vector<vector<int>>& board) {
        int n = board.size();
        vector<int> flat(n * n, -1);
        int idx = 0;
        bool lefttoRight = true;
        for(int i =n-1;i>=0;i--){
            if(lefttoRight){
                for(int j =0;j<n;j++){
                    flat[idx++] = board[i][j];
                }
            }
            else{
                for(int j=n-1;j>=0;j--){
                    flat[idx++] = board[i][j];
                }
            }
            lefttoRight = !lefttoRight;
        }
        queue<pair<int,int>> q;
        vector<int> visited(n*n,false);
        q.push({0,0});
        visited[0]=true;
        while(!q.empty()){
            auto [pos ,moves] = q.front();
            q.pop();
            if(pos == n*n-1) return moves;
            for(int i =1;i<=6;i++){
                int next = pos+i;
                if(next>=n*n) continue;
                int dest = (flat[next]==-1)?next : flat[next]-1;
                if (!visited[dest]) {
                    visited[dest] = true;
                    q.push({dest, moves + 1});
                }
            }
        }
        return -1;
    }
};
