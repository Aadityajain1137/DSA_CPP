class Solution {
public:
    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {
        int n = quiet.size();
        vector<vector<int>> adj(n);
        vector<int> indegree(n, 0);
        vector<int> answer(n,0);
        for (auto& a : richer) {
            adj[a[0]].push_back(a[1]);
            indegree[a[1]]++;
        }
        for(int i =0;i<n;i++){
            answer[i]=i;
        }
        queue<int> q;
        for(int i=0;i<n;i++){
            if(indegree[i]==0){
                q.push(i);
            }
        }
        while(!q.empty()){
            int front = q.front();
            q.pop();
            for(auto ne : adj[front]){
                if(quiet[answer[front]]<quiet[answer[ne]]){
                    answer[ne]  = answer[front];
                }
                indegree[ne]--;
                if(indegree[ne]==0){
                    q.push(ne);
                }
            }
        }
        return answer;
    }
};
